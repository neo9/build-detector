#!/bin/bash

set -o errexit
set -o pipefail

echo "Starting build detector..."

# default values
detectedBuildTool=""
detectedImageBuildTool="cnb"
detectedBuildFormat="image"
detectedCnbBuilder="paketobuildpacks/builder:base"
detectedCnbBuilder=""
detectedChartName="neo9charts/n9-api"
detectedChartVersion=""
detectedCypressTest="false"
detectedBranch=""
dockerfile="Dockerfile"
preinstall="false"
postinstall="false"
detectedBuildToolToo=""
shouldBeDeployed="false"
detectedLhci="false"
buildDependencies="false"

if [ ! -z "$PARAMS_DOCKERFILE_OVERRIDE" ]; then
    dockerfile=$PARAMS_DOCKERFILE_OVERRIDE
fi

if [ -f $dockerfile ]; then
    detectedBuildTool="docker"
    detectedImageBuildTool="buildah"
    if [ -f build.gradle ]; then
        detectedBuildToolToo="gradle"
    elif [ -f pom.xml ]; then
        detectedBuildToolToo="maven"
    elif [ -f package.json ]; then
        detectedBuildToolToo="npm"
    fi
elif [ -f build.gradle ]; then
    detectedBuildTool="gradle"
    detectedBuildToolToo="gradle"
    if grep 'com.google.cloud.tools.jib' build.gradle; then
        detectedImageBuildTool="jib"
    fi
    if grep -E 'helmChart(.*)=' build.gradle; then
        helmChartNameAndVersion=$(grep -E 'helmChart(.*)=' build.gradle | awk -F= '{print $2}' | xargs)
        detectedChartName=$(echo "$helmChartNameAndVersion" | awk -F: '{print $1}' | tr -d '\n')
        detectedChartVersion=$(echo "$helmChartNameAndVersion" | awk -F: '{print $2}' | tr -d '\n')
    fi
elif [ -f pom.xml ]; then
    detectedBuildTool="maven"
    detectedBuildToolToo="maven"
    if grep  'jib' pom.xml; then
        detectedImageBuildTool="jib"
    fi
    if grep '<helmChart>' pom.xml; then
        helmChartNameAndVersion=$(grep '<helmChart>' pom.xml | sed 's,<helmChart>\(.*\)</helmChart>,\1,g' | xargs)
        detectedChartName=$(echo "$helmChartNameAndVersion" | awk -F: '{print $1}' | tr -d '\n')
        detectedChartVersion=$(echo "$helmChartNameAndVersion" | awk -F: '{print $2}' | tr -d '\n')
    fi
elif [ -f package.json ]; then
    detectedBuildTool="npm"
    detectedBuildToolToo="npm"
    if grep 'cnbBuilder' package.json; then
        detectedCnbBuilder=$(cat package.json | jq --raw-output '.cnbBuilder')
        detectedCnbRunImage=$(cat package.json | jq --raw-output '.cnbRunImage')
    fi
    if grep 'helmChart' package.json; then
        helmChartNameAndVersion=$(cat package.json | jq --raw-output '.helmChart')
        detectedChartName=$(echo "$helmChartNameAndVersion" | awk -F: '{print $1}' | tr -d '\n')
        detectedChartVersion=$(echo "$helmChartNameAndVersion" | awk -F: '{print $2}' | tr -d '\n')
    fi
else
    echo 'could not detect build tool, aborting'
    exit 3
fi

if [ -f values/config.yaml ]; then
    detectedChartName=$(cat values/config.yaml | awk -F ': ' 'NR==1{print $2}')
    detectedChartVersion=$(cat values/config.yaml | awk -F ': ' 'NR==2{print $2}')
fi

if [ ! -z "$PARAMS_CHART_NAME_OVERRIDE" ]; then
    detectedChartName="$PARAMS_CHART_NAME_OVERRIDE"
fi

if [ ! -z "$PARAMS_CHART_VERSION_OVERRIDE" ]; then
    detectedChartVersion="$PARAMS_CHART_VERSION_OVERRIDE"
fi

if [ -f package.json ]; then
    if grep -q "ci:preinstall" package.json; then
        preinstall="true"
    fi
    if grep -q "ci:postinstall" package.json; then
        postinstall="true"
    fi
    if grep -q "buildDependencies" package.json; then
        buildDependencies="true"
    fi
fi

if [ ! -z "$PARAMS_BUILD_FORMAT_OVERRIDE" ]; then
    detectedBuildFormat="$PARAMS_BUILD_FORMAT_OVERRIDE"
fi

if [ ! -z "$PARAMS_BUILD_TOOL_OVERRIDE" ]; then
    detectedBuildTool="$PARAMS_BUILD_TOOL_OVERRIDE"
fi

if [ -d cypress ]; then
    detectedCypressTest="true"
fi

if [ -f lighthouserc.yml ]; then
    detectedLhci="true"
fi

if [[ "${PARAMS_DEPLOY_ENABLED}" == "true" && -d values ]]; then
    shouldBeDeployed="true"
fi

regexVersion='^v([0-9]+\.){0,2}(\*|[0-9]+)([-,a-z,0-9]*)$'
if [[ "$PARAMS_BRANCH_OVERRIDE" =~ $regexVersion ]]; then
    detectedBranch="tag"
else
    detectedBranch="$PARAMS_BRANCH_OVERRIDE"
fi

if [[ -e /etc/podinfo/labels ]]; then
    piplinerunName=`cat /etc/podinfo/labels`
fi;

if [[ -z "$OUTPUT_PATH" ]]; then
    OUTPUT_PATH="."
fi

if [[ -z "$OUTPUT_NAME" ]]; then
    OUTPUT_NAME="build-detector.json"
fi

cat <<EOF > "${OUTPUT_PATH}/${OUTPUT_NAME}"
{
    "detectedCnbRunImage": "${detectedCnbRunImage}",
    "detectedCnbBuilder": "${detectedCnbBuilder}",
    "detectedBuildTool":  "${detectedBuildTool}",
    "detectedBuildToolToo": "${detectedBuildToolToo}",
    "detectedImageBuildTool": "${detectedImageBuildTool}",
    "detectedBuildFormat": "${detectedBuildFormat}",
    "detectedChartName": "${detectedChartName}",
    "detectedChartVersion": "${detectedChartVersion}",
    "detectedCypressTest": "${detectedCypressTest}",
    "detectedBranch": "${detectedBranch}",
    "piplinerunName": "${piplinerunName}",
    "preinstall": "${preinstall}",
    "postinstall": "${postinstall}",
    "shouldBeDeployed": "${shouldBeDeployed}",
    "detectedLhci": "${detectedLhci}"
    "buildDependencies": "${buildDependencies}"
}
EOF

cat "$OUTPUT_PATH/$OUTPUT_NAME"

echo "End of build-detector"
