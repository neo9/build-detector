#! /bin/bash

set -o errexit
set -o pipefail

WORKING_DIR="."
DOCKERFILE="Dockerfile"
REGISTRY_IMAGE=""
DETECT_OUTPUT="json"
OPERATION=""

###############################################################################
# Functions definitions.
###############################################################################

# Override the default echo function to prefix by the timestamp on each call.
echo() {
    command echo "[$(date)] $@"
}

# Default help message.
help() {
    command echo "Build detector."
    command echo
    command echo "This small utility aims to help building or detecting a project"
    command echo "using its framework."
    command echo
    command echo "Global options:"
    command echo
    command echo "--working-dir=WORKING_DIR     Define the working directory."
    command echo
    command echo "Commands:"
    command echo
    command echo "> build-detector detect [ --working-dir= ]"
    command echo
    command echo "Output detection information in JSON."
    # command echo
    # command echo "> build-detector build  [ --working-dir= , --dockerfile=, --registry= ]"
    # command echo
    # command echo "Detect and build the project by detecting the underlying framework."
    # command echo "You can optionnaly use a custom Dockerfile to build it (if not empty)."
    # command echo "--dockerfile and --registry are optionals but you will need to parse"
    # command echo "ouput in order to manually push the image to the registry."
}

# Build an image. In fact, this function is just a wrap to handle failure.
build() {
    echo "Running \"$@\"."
    echo "Build log will be stored in \"${WORKING_DIR%/}/.build/build.log\"."

    log=$($@ | tee .build/build.log) || fail=1

    if [ "$fail" == "1" ]; then
        echo "Build fail. Exiting."
        exit 3
    fi

    echo "Successfully built the image."
}

# Assert a list of programs/tools are installed in the system.
assert_installed() {
    for tool in "$@"; do
        if ! [ -x "$(command -v $tool)" ]; then
            echo "Oops, the system is missing \"$tool\". Aborting." >&2
            exit 1
        fi
    done
}

###############################################################################
# Script initialization.
###############################################################################

while [ -n "$1" ]; do
    case "$1" in
        # build)            OPERATION="build"  ;;
        detect)           OPERATION="detect" ;;
        -w|--working-dir) WORKING_DIR=$2     ; shift ;;
        -d|--dockerfile)  DOCKERFILE=$2      ; shift ;;
        -r|--registry)    REGISTRY_IMAGE=$2  ; shift ;;
        -h|--help)
            help
            exit
            ;;
        *)
            command echo "Parsing error: $1 not reconized."
            command echo "---"
            command echo
            help

            exit
            ;;
    esac
    shift
done

# Check if the operation is properly set. If not, just display the help message.
if [ -z $OPERATION ]; then
    help
    exit
fi

###############################################################################
# Directory and variables initialization.
###############################################################################

# Go to the working directory.
cd $WORKING_DIR

# Setting up project detection. We need some variables.
CNB_BUILDER="paketobuildpacks/builder:base"
BUILD_TOOL=""
IMAGE_BUILD_TOOL="cnb"
BUILD_FORMAT="image"
HELM_CHART_NAME="neo9charts/n9-api"
HELM_CHART_VERSION=""
CYPRESS_TI="false"
TAG=""

###############################################################################
# Detection.
###############################################################################

# This variable is just a refactoring purpose. We don't need it as output.
HELM_CHART=""

# Start by checking if the working directory contains a (custom?) Dockerfile.
if [ -f $DOCKERFILE ]; then
    BUILD_TOOL="docker"
    IMAGE_BUILD_TOOL="buildah"

# Next, do the same check for Java (Gradle).
elif [ -f build.gradle ]; then
    BUILD_TOOL="gradle"

    if grep --quiet 'com.google.cloud.tools.jib' build.gradle; then
        IMAGE_BUILD_TOOL="jib"
    elif grep --quiet 'bootBuildImage' build.gradle; then
        IMAGE_BUILD_TOOL="boot"
    else
        echo "Unable to detect image build tool for \"$BUILD_TOOL\"."
    fi

    # Detecting Helm chart if specified.
    if grep -E 'helmChart(.*)=' build.gradle; then
        HELM_CHART=$(grep -E 'helmChart(.*)=' build.gradle | awk -F= '{print $2}' | xargs)
    fi

# Check for Maven.
elif [ -f pom.xml ]; then
    BUILD_TOOL="maven"

    if grep  'jib' pom.xml; then
        IMAGE_BUILD_TOOL="jib"
    fi

    if grep '<helmChart>' pom.xml; then
        HELM_CHART=$(grep '<helmChart>' pom.xml | sed 's,<helmChart>\(.*\)</helmChart>,\1,g' | xargs)
    fi

# Check for JS/NodeJS.
elif [ -f package.json ]; then
    BUILD_TOOL=$([ -f yarn.lock ] && command echo "yarn" || command echo "npm")

    if grep 'cnbBuilder' package.json; then
        CNB_BUILDER=$(cat package.json | jq --raw-output '.cnbBuilder')
    fi

    if grep 'helmChart' package.json; then
        HELM_CHART=$(cat package.json | jq --raw-output '.helmChart')
    fi

elif [ -f go.mod ]; then
    BUILD_TOOL="go"
    IMAGE_BUILD_TOOL="pack"

# Oops, we can't detect the building stack.
else
    echo "Could not detect build stack. Aborting."
    exit 3
fi

# Detect Helm chart name and version.
if [ ! -z $HELM_CHART ]; then
    HELM_CHART_NAME=$(echo $HELM_CHART | awk -F: '{print $1}' | tr -d '\n')
    HELM_CHART_VERSION=$(echo $HELM_CHART | awk -F: '{print $2}' | tr -d '\n')
fi

# Detect Cypress tests.
if [ -d cypress ]; then
    CYPRESS_TI="true"
fi

###############################################################################
# Only output the detection.
###############################################################################

# Only detect (output as JSON).
if [ "$OPERATION" != "build" ]; then
    jq --null-input -Mc \
        --arg CNB_BUILDER "$CNB_BUILDER" \
        --arg BUILD_TOOL "$BUILD_TOOL" \
        --arg IMAGE_BUILD_TOOL "$IMAGE_BUILD_TOOL" \
        --arg BUILD_FORMAT "$BUILD_FORMAT" \
        --arg HELM_CHART_NAME "$HELM_CHART_NAME" \
        --arg HELM_CHART_VERSION "$HELM_CHART_VERSION" \
        --arg CYPRESS_TI "$CYPRESS_TI" \
        --arg REGISTRY "$REGISTRY_IMAGE" \
        '{
            "CNB_BUILDER": $CNB_BUILDER,
            "BUILD_TOOL": $BUILD_TOOL,
            "IMAGE_BUILD_TOOL": $IMAGE_BUILD_TOOL,
            "BUILD_FORMAT": $BUILD_FORMAT,
            "HELM_CHART_NAME": $HELM_CHART_NAME,
            "HELM_CHART_VERSION": $HELM_CHART_VERSION,
            "CYPRESS_TI": $CYPRESS_TI,
            "REGISTRY": $REGISTRY,
        }'

    # Use `jq` error code to finish the program.
    exit $?
fi

################################################################################
# Process the build.
################################################################################

echo "Build the project using $BUILD_TOOL."
[ -d .build ] || mkdir .build

IMAGE_ID=""
IMAGE_TAG=""

case "$BUILD_TOOL" in
    docker)
        assert_installed docker
        build docker build . -f $DOCKERFILE
        ;;
    gradle)
        assert_installed java

        if [ "$IMAGE_BUILD_TOOL" == "jib" ]; then
            build ./gradlew jibDockerBuild
        elif [ "$IMAGE_BUILD_TOOL" == "boot" ]; then
            build NATIVE_IMAGE=false ./gradlew bootBuildImage
        else
            echo "Unsupported \"$IMAGE_BUILD_TOOL\" for \"$BUILD_TOOL\"."
            exit 1
        fi
        ;;
    go)
        build pack build $(basename "$WORKING_DIR") \
            --buildpack gcr.io/paketo-buildpacks/go \
            --builder paketobuildpacks/builder:base
        ;;
    maven)
        assert_installed java
        build ./mvnw compile jib:dockerBuild
        ;;
    yarn)
        assert_installed yarn pack
        build yarn buildImage
        ;;
    npm)
        assert_installed npm pack
        build npm run buildImage
        ;;
    *)
        echo "\"$BUILD_TOOL\" is not supported yet. Aborting."
        exit 3
        ;;
esac

################################################################################
# Determine the image tag.
################################################################################

# By default, this will be used for `pack` builds.
if [[ $(cat .build/build.log | tac | grep Images | sed 's/.*(\(.*\)):/\1/') ]]; then
    IMAGE_ID=$(cat .build/build.log | tac | grep Images | sed 's/.*(\(.*\)):/\1/')
    IMAGE_TAG=$(command echo "$IMAGE_ID" | cut -c1-16)

# Custom Java build.
elif [ -f build/jib-image.id -a -f build/jib-image.digest ]; then
    IMAGE_ID=$(cat target/jib-image.id | awk -F: '{print $2}')
    IMAGE_TAG=$(cat target/jib-image.digest | awk -F: '{print $2}' | cut -c1-16)

# Fallback on a Docker log build.
else
    IMAGE_ID=$(cat ".build/build.log" | grep "Successfully built" | sed 's/Successfully built \(.*\)/\1/')
    IMAGE_TAG=$(command echo "$IMAGE_ID" | cut -c1-16)
fi

################################################################################
# Push to registry
################################################################################

# If the REGISTRY_IMAGE variable is set, simply automatically push to this
# registry by renaming the image tag.
if [ ! -z "$REGISTRY_IMAGE" ]; then
    echo "Pushing the image to the registry \"$REGISTRY_IMAGE:$IMAGE_TAG\"."

    docker tag $IMAGE_ID "$REGISTRY_IMAGE:$IMAGE_TAG" &> /dev/null
    docker push "$REGISTRY_IMAGE:$IMAGE_TAG" &> /dev/null
fi

################################################################################
# Cleanup and final writing.
################################################################################

echo "Storing image tag ($IMAGE_TAG) in \".build/tag\"."
command echo $IMAGE_TAG > .build/tag

echo "Done."
